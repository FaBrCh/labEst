positivo = sum(classificacao_clima == "Positivo", na.rm = TRUE),
pct_positivo = 100 * sum(classificacao_clima == "Positivo", na.rm = TRUE) / n()
) %>%
arrange(PORTE_IBGE) # Ordenar por porte
print(
gt::gt(resumo_por_porte) %>%
gt::cols_label(
PORTE_IBGE = "Porte IBGE",
n = "N",
media = "Média",
dp = "DP",
mediana = "Mediana",
positivo = "Clima Positivo (n)",
pct_positivo = "% Positivo"
) %>%
gt::fmt_number(columns = c(media, dp, mediana, pct_positivo), decimals = 1) %>%
gt::tab_header(title = "Clima de Segurança por Porte do Município (IBGE)")
)
} else {
cat("\nColuna 'PORTE_IBGE' não encontrada para análise por porte.\n")
}
# 7. Análise por Macrorregião (NOVO)
if ("MACRORREGIOES" %in% names(dados_mapeados)) {
resumo_por_macro <- dados_mapeados %>%
filter(!is.na(MACRORREGIOES)) %>% # Filtrar NAs
group_by(MACRORREGIOES) %>%
summarise(
n = n(),
media = mean(clima_seguranca_total, na.rm = TRUE),
dp = sd(clima_seguranca_total, na.rm = TRUE),
mediana = median(clima_seguranca_total, na.rm = TRUE),
positivo = sum(classificacao_clima == "Positivo", na.rm = TRUE),
pct_positivo = 100 * sum(classificacao_clima == "Positivo", na.rm = TRUE) / n()
) %>%
arrange(MACRORREGIOES)
print(
gt::gt(resumo_por_macro) %>%
gt::cols_label(
MACRORREGIOES = "Macrorregião",
n = "N",
media = "Média",
dp = "DP",
mediana = "Mediana",
positivo = "Clima Positivo (n)",
pct_positivo = "% Positivo"
) %>%
gt::fmt_number(columns = c(media, dp, mediana, pct_positivo), decimals = 1) %>%
gt::tab_header(title = "Clima de Segurança por Macrorregião")
)
} else {
cat("\nColuna 'MACRORREGIOES' não encontrada para análise por macrorregião.\n")
}
# 8. Análise por URS (Microrregião) (NOVO) - Pode gerar muitas linhas
if ("URS" %in% names(dados_mapeados)) {
resumo_por_urs <- dados_mapeados %>%
filter(!is.na(URS)) %>%
group_by(URS) %>%
summarise(
n = n(),
media = mean(clima_seguranca_total, na.rm = TRUE),
dp = sd(clima_seguranca_total, na.rm = TRUE),
mediana = median(clima_seguranca_total, na.rm = TRUE),
positivo = sum(classificacao_clima == "Positivo", na.rm = TRUE),
pct_positivo = 100 * sum(classificacao_clima == "Positivo", na.rm = TRUE) / n()
) %>%
arrange(URS)
# cat("\n--- Análise por URS (Microrregião) ---\n") # Comentado ou removido
# print(resumo_por_urs, n = Inf) # Removido
# <<< Criar tabela GT para URS >>>
print(
gt::gt(resumo_por_urs) %>%
gt::cols_label(
URS = "URS (Microrregião)",
n = "N",
media = "Média",
dp = "DP",
mediana = "Mediana",
positivo = "Clima Positivo (n)",
pct_positivo = "% Positivo"
) %>%
gt::fmt_number(columns = c(media, dp, mediana, pct_positivo), decimals = 1) %>%
gt::tab_header(title = "Clima de Segurança por URS (Microrregião)") %>%
# Adicionar opção para ajustar tamanho da fonte se a tabela for muito grande
gt::tab_options(table.font.size = "small")
)
# cat("--- Fim Análise por URS ---\n") # Comentado ou removido
} else {
cat("\nColuna 'URS' não encontrada para análise por URS/Microrregião.\n")
}
# 7. Análise por Macrorregião (NOVO)
if ("MACRORREGIOES" %in% names(dados_mapeados)) {
resumo_por_macro <- dados_mapeados %>%
filter(!is.na(MACRORREGIOES)) %>% # Filtrar NAs
group_by(MACRORREGIOES) %>%
summarise(
n = n(),
media = mean(clima_seguranca_total, na.rm = TRUE),
dp = sd(clima_seguranca_total, na.rm = TRUE),
mediana = median(clima_seguranca_total, na.rm = TRUE),
positivo = sum(classificacao_clima == "Positivo", na.rm = TRUE),
pct_positivo = 100 * sum(classificacao_clima == "Positivo", na.rm = TRUE) / n()
) %>%
arrange(MACRORREGIOES)
print(
gt::gt(resumo_por_macro) %>%
gt::cols_label(
MACRORREGIOES = "Macrorregião",
n = "N",
media = "Média",
dp = "DP",
mediana = "Mediana",
positivo = "Clima Positivo (n)",
pct_positivo = "% Positivo"
) %>%
gt::fmt_number(columns = c(media, dp, mediana, pct_positivo), decimals = 1) %>%
gt::tab_header(title = "Clima de Segurança por Macrorregião")
)
} else {
cat("\nColuna 'MACRORREGIOES' não encontrada para análise por macrorregião.\n")
}
# 8. Análise por URS (Microrregião) (NOVO) - Pode gerar muitas linhas
if ("URS" %in% names(dados_mapeados)) {
resumo_por_urs <- dados_mapeados %>%
filter(!is.na(URS)) %>%
group_by(URS) %>%
summarise(
n = n(),
media = mean(clima_seguranca_total, na.rm = TRUE),
dp = sd(clima_seguranca_total, na.rm = TRUE),
mediana = median(clima_seguranca_total, na.rm = TRUE),
positivo = sum(classificacao_clima == "Positivo", na.rm = TRUE),
pct_positivo = 100 * sum(classificacao_clima == "Positivo", na.rm = TRUE) / n()
) %>%
arrange(URS)
# cat("\n--- Análise por URS (Microrregião) ---\n") # Comentado ou removido
# print(resumo_por_urs, n = Inf) # Removido
# <<< Criar tabela GT para URS >>>
print(
gt::gt(resumo_por_urs) %>%
gt::cols_label(
URS = "URS (Microrregião)",
n = "N",
media = "Média",
dp = "DP",
mediana = "Mediana",
positivo = "Clima Positivo (n)",
pct_positivo = "% Positivo"
) %>%
gt::fmt_number(columns = c(media, dp, mediana, pct_positivo), decimals = 1) %>%
gt::tab_header(title = "Clima de Segurança por URS (Microrregião)") %>%
# Adicionar opção para ajustar tamanho da fonte se a tabela for muito grande
gt::tab_options(table.font.size = "small")
)
# cat("--- Fim Análise por URS ---\n") # Comentado ou removido
} else {
cat("\nColuna 'URS' não encontrada para análise por URS/Microrregião.\n")
}
# 9. Análise Cruzada: Clima de Segurança por Porte do Município e Cargo (NOVO)
col_cargo_analise <- "Cargo na Atenção Primária à Saúde (APS) / Unidade Básica de Saúde (UBS)"
if ("PORTE_IBGE" %in% names(dados_mapeados) && col_cargo_analise %in% names(dados_mapeados)) {
resumo_porte_cargo <- dados_mapeados %>%
filter(!is.na(PORTE_IBGE) & !is.na(.data[[col_cargo_analise]])) %>% # Filtrar NAs em ambas as colunas
group_by(PORTE_IBGE, .data[[col_cargo_analise]]) %>%
summarise(
n = n(),
media = mean(clima_seguranca_total, na.rm = TRUE),
dp = sd(clima_seguranca_total, na.rm = TRUE),
mediana = median(clima_seguranca_total, na.rm = TRUE),
positivo = sum(classificacao_clima == "Positivo", na.rm = TRUE),
pct_positivo = 100 * sum(classificacao_clima == "Positivo", na.rm = TRUE) / n(),
.groups = 'drop' # Evita agrupamento residual
) %>%
# <<< CONVERTER PORTE PARA FATOR PARA ORDENAÇÃO CORRETA >>>
mutate(PORTE_IBGE = factor(PORTE_IBGE, levels = c("Pequeno Porte", "Médio Porte", "Grande Porte"))) %>%
# Ordenar por Porte (fator), depois por Cargo
arrange(PORTE_IBGE, .data[[col_cargo_analise]])
print(
gt::gt(resumo_porte_cargo) %>%
gt::cols_label(
PORTE_IBGE = "Porte IBGE",
!!sym(col_cargo_analise) := "Cargo", # Renomeia dinamicamente
n = "N",
media = "Média",
dp = "DP",
mediana = "Mediana",
positivo = "Clima Positivo (n)",
pct_positivo = "% Positivo"
) %>%
gt::fmt_number(columns = c(media, dp, mediana, pct_positivo), decimals = 1) %>%
gt::tab_header(title = "Clima de Segurança por Porte do Município e Cargo") %>%
# <<< REMOVER AGRUPAMENTO VISUAL >>>
# gt::tab_row_group(group = "PORTE_IBGE") %>%
# gt::row_group_order(groups = c("Pequeno Porte", "Médio Porte", "Grande Porte")) %>%
gt::tab_options(table.font.size = "small")
)
# <<< Adicionar Gráfico Boxplot Cruzado: Porte vs Cargo >>>
print(
ggplot(dados_mapeados %>%
filter(!is.na(PORTE_IBGE) & !is.na(.data[[col_cargo_analise]])) %>%
# Ordenar Porte para o gráfico
mutate(PORTE_IBGE = factor(PORTE_IBGE, levels = c("Pequeno Porte", "Médio Porte", "Grande Porte"))),
aes(x = PORTE_IBGE, y = clima_seguranca_total, fill = .data[[col_cargo_analise]])) +
geom_boxplot(position = position_dodge(preserve = 'single')) + # position_dodge para separar cargos
theme_minimal() +
labs(title = "Clima de Segurança por Porte do Município e Cargo",
x = "Porte IBGE",
y = "Pontuação (0-100)",
fill = "Cargo") + # Título da legenda
theme(axis.text.x = element_text(angle = 45, hjust = 1),
legend.position = "top") + # Legenda no topo
geom_hline(yintercept = 75, linetype = "dashed", color = "green", size = 1) +
geom_hline(yintercept = 50, linetype = "dashed", color = "orange", size = 1)
)
# <<< Adicionar Gráfico de Barras Médias Cruzado: Porte vs Cargo >>>
print(
ggplot(resumo_porte_cargo, # Usar o dataframe já sumarizado
aes(x = PORTE_IBGE, y = media, fill = .data[[col_cargo_analise]])) +
# Usar stat="identity" pois 'media' já é a altura desejada
# Usar position="dodge" para barras lado a lado
geom_bar(stat = "identity", position = position_dodge(preserve = 'single')) +
theme_minimal() +
labs(title = "Média do Clima de Segurança por Porte do Município e Cargo",
x = "Porte IBGE",
y = "Pontuação Média (0-100)",
fill = "Cargo") + # Título da legenda
theme(axis.text.x = element_text(angle = 45, hjust = 1),
legend.position = "top") + # Legenda no topo
geom_hline(yintercept = 75, linetype = "dashed", color = "green", size = 1) +
geom_hline(yintercept = 50, linetype = "dashed", color = "orange", size = 1)
)
} else {
cat("\nColunas 'PORTE_IBGE' ou 'Cargo...' não encontradas para análise cruzada.\n")
}
# ==============================================================================
# 10. VISUALIZAÇÕES GRÁFICAS DAS ANÁLISES DESCRITIVAS
# ==============================================================================
# Visualizações gráficas
# 1. Boxplot por cargo
ggplot(dados_mapeados, aes(x = reorder(`Cargo na Atenção Primária à Saúde (APS) / Unidade Básica de Saúde (UBS)`, clima_seguranca_total, FUN = median),
y = clima_seguranca_total, fill = `Cargo na Atenção Primária à Saúde (APS) / Unidade Básica de Saúde (UBS)`)) +
geom_boxplot() +
theme_minimal() +
labs(title = "Clima de Segurança por Cargo",
x = "Cargo",
y = "Pontuação (0-100)") +
theme(axis.text.x = element_text(angle = 45, hjust = 1),
legend.position = "none") +
geom_hline(yintercept = 75, linetype = "dashed", color = "green", size = 1.5) +
geom_hline(yintercept = 50, linetype = "dashed", color = "orange", size = 1.5)
# 2. Boxplot por faixa etária
ggplot(dados_mapeados, aes(x = faixa_etaria, y = clima_seguranca_total, fill = faixa_etaria)) +
geom_boxplot() +
theme_minimal() +
labs(title = "Clima de Segurança por Faixa Etária",
x = "Faixa Etária",
y = "Pontuação (0-100)") +
theme(legend.position = "none") +
geom_hline(yintercept = 75, linetype = "dashed", color = "green", size = 1.5) +
geom_hline(yintercept = 50, linetype = "dashed", color = "orange", size = 1.5)
# ==============================================================================
# 10. VISUALIZAÇÕES GRÁFICAS DAS ANÁLISES DESCRITIVAS
# ==============================================================================
# Visualizações gráficas
# 1. Boxplot por cargo
ggplot(dados_mapeados, aes(x = reorder(`Cargo na Atenção Primária à Saúde (APS) / Unidade Básica de Saúde (UBS)`, clima_seguranca_total, FUN = median),
y = clima_seguranca_total, fill = `Cargo na Atenção Primária à Saúde (APS) / Unidade Básica de Saúde (UBS)`)) +
geom_boxplot() +
theme_minimal() +
labs(title = "Clima de Segurança por Cargo",
x = "Cargo",
y = "Pontuação (0-100)") +
theme(axis.text.x = element_text(angle = 45, hjust = 1),
legend.position = "none") +
geom_hline(yintercept = 75, linetype = "dashed", color = "green", size = 1.5) +
geom_hline(yintercept = 50, linetype = "dashed", color = "orange", size = 1.5)
# 2. Boxplot por faixa etária
ggplot(dados_mapeados, aes(x = faixa_etaria, y = clima_seguranca_total, fill = faixa_etaria)) +
geom_boxplot() +
theme_minimal() +
labs(title = "Clima de Segurança por Faixa Etária",
x = "Faixa Etária",
y = "Pontuação (0-100)") +
theme(legend.position = "none") +
geom_hline(yintercept = 75, linetype = "dashed", color = "green", size = 1.5) +
geom_hline(yintercept = 50, linetype = "dashed", color = "orange", size = 1.5)
# 2. Boxplot por faixa etária
ggplot(dados_mapeados, aes(x = faixa_etaria, y = clima_seguranca_total, fill = faixa_etaria)) +
geom_boxplot() +
theme_minimal() +
labs(title = "Clima de Segurança por Faixa Etária",
x = "Faixa Etária",
y = "Pontuação (0-100)") +
theme(legend.position = "none") +
geom_hline(yintercept = 75, linetype = "dashed", color = "green", size = 1.5) +
geom_hline(yintercept = 50, linetype = "dashed", color = "orange", size = 1.5)
# 4. Comparação dos domínios por cargo
dominio_cargo <- dados_mapeados %>%
pivot_longer(
cols = c(clima_trabalho_equipe, clima_seguranca, satisfacao_trabalho,
percepcao_estresse, percepcao_gestao, condicoes_trabalho),
names_to = "dominio",
values_to = "pontuacao"
) %>%
group_by(`Cargo na Atenção Primária à Saúde (APS) / Unidade Básica de Saúde (UBS)`, dominio) %>%
summarise(
media = mean(pontuacao, na.rm = TRUE),
.groups = "drop"
)
ggplot(dominio_cargo, aes(x = dominio, y = media, fill = `Cargo na Atenção Primária à Saúde (APS) / Unidade Básica de Saúde (UBS)`)) +
geom_bar(stat = "identity", position = "dodge") +
theme_minimal() +
labs(title = "Média dos Domínios por Cargo",
x = "Domínio",
y = "Pontuação Média (0-100)",
fill = "Cargo") +
theme(axis.text.x = element_text(angle = 45, hjust = 1),
legend.position = "top") +
geom_hline(yintercept = 75, linetype = "dashed", color = "green", size = 1) +
geom_hline(yintercept = 50, linetype = "dashed", color = "orange", size = 1)
# 5. Boxplot por Porte (NOVO)
if ("PORTE_IBGE" %in% names(dados_mapeados)) {
print(
ggplot(dados_mapeados %>% filter(!is.na(PORTE_IBGE)),
aes(x = PORTE_IBGE, y = clima_seguranca_total, fill = PORTE_IBGE)) +
geom_boxplot() +
theme_minimal() +
labs(title = "Clima de Segurança por Porte do Município (IBGE)",
x = "Porte IBGE",
y = "Pontuação (0-100)") +
theme(legend.position = "none") +
geom_hline(yintercept = 75, linetype = "dashed", color = "green", size = 1.5) +
geom_hline(yintercept = 50, linetype = "dashed", color = "orange", size = 1.5)
)
}
# 6. Boxplot por Macrorregião (NOVO)
if ("MACRORREGIOES" %in% names(dados_mapeados)) {
print(
ggplot(dados_mapeados %>% filter(!is.na(MACRORREGIOES)),
aes(x = reorder(MACRORREGIOES, clima_seguranca_total, FUN = median),
y = clima_seguranca_total, fill = MACRORREGIOES)) +
geom_boxplot() +
theme_minimal() +
labs(title = "Clima de Segurança por Macrorregião",
x = "Macrorregião",
y = "Pontuação (0-100)") +
theme(axis.text.x = element_text(angle = 45, hjust = 1),
legend.position = "none") +
geom_hline(yintercept = 75, linetype = "dashed", color = "green", size = 1.5) +
geom_hline(yintercept = 50, linetype = "dashed", color = "orange", size = 1.5)
)
}
# 5. Boxplot por Porte (NOVO)
if ("PORTE_IBGE" %in% names(dados_mapeados)) {
print(
ggplot(dados_mapeados %>% filter(!is.na(PORTE_IBGE)),
aes(x = PORTE_IBGE, y = clima_seguranca_total, fill = PORTE_IBGE)) +
geom_boxplot() +
theme_minimal() +
labs(title = "Clima de Segurança por Porte do Município (IBGE)",
x = "Porte IBGE",
y = "Pontuação (0-100)") +
theme(legend.position = "none") +
geom_hline(yintercept = 75, linetype = "dashed", color = "green", size = 1.5) +
geom_hline(yintercept = 50, linetype = "dashed", color = "orange", size = 1.5)
)
}
# 6. Boxplot por Macrorregião (NOVO)
if ("MACRORREGIOES" %in% names(dados_mapeados)) {
print(
ggplot(dados_mapeados %>% filter(!is.na(MACRORREGIOES)),
aes(x = reorder(MACRORREGIOES, clima_seguranca_total, FUN = median),
y = clima_seguranca_total, fill = MACRORREGIOES)) +
geom_boxplot() +
theme_minimal() +
labs(title = "Clima de Segurança por Macrorregião",
x = "Macrorregião",
y = "Pontuação (0-100)") +
theme(axis.text.x = element_text(angle = 45, hjust = 1),
legend.position = "none") +
geom_hline(yintercept = 75, linetype = "dashed", color = "green", size = 1.5) +
geom_hline(yintercept = 50, linetype = "dashed", color = "orange", size = 1.5)
)
}
# Instalar pacotes necessários se não estiverem instalados
if (!require("sf")) install.packages("sf")
if (!require("geobr")) install.packages("geobr")
if (!require("stringr")) install.packages("stringr")
if (!require("ggplot2")) install.packages("ggplot2")
library(sf)
library(geobr)
library(stringr)
library(ggplot2)
library(dplyr) # Certificar que dplyr está carregado
# 1. Obter dados geográficos (Mantido e Adicionado Regiões)
mg_mun <- read_municipality(code_muni = "MG", year = 2020)
# Tentar carregar dados das regiões de saúde
mg_regions <- NULL # Inicializar como NULL
tryCatch({
mg_regions_temp <- read_health_region(year = 2019)
if (nrow(mg_regions_temp) > 0) {
mg_regions <- mg_regions_temp %>% filter(abbrev_state == "MG")
}
}, error = function(e) {
warning(paste("Erro ao baixar/processar dados das regiões de saúde:", e$message))
})
# Verificar se mg_regions foi carregado corretamente
if (is.null(mg_regions) || nrow(mg_regions) == 0) {
warning("Não foi possível carregar ou encontrar dados das regiões de saúde para MG. O mapa será gerado sem elas.")
plotar_regioes = FALSE
} else {
plotar_regioes = TRUE
cat("Dados das regiões de saúde carregados com sucesso.\n")
}
# Limpar nomes no resumo e nos dados geográficos
resumo_por_municipio_mapa <- resumo_por_municipio %>%
mutate(Municipio_limpo = limpar_nomes(Município))
mg_mun_mapa <- mg_mun %>%
mutate(Municipio_limpo = limpar_nomes(name_muni))
# 3. Juntar os dados de pontuação aos dados geográficos (Mantido)
mg_map_data <- left_join(mg_mun_mapa,
resumo_por_municipio_mapa %>% select(Municipio_limpo, Município, media, n),
by = "Municipio_limpo")
# Verificar NAs após a junção (Mantido)
cat("Municípios do mapa sem correspondência nos dados:", sum(is.na(mg_map_data$media)), "\n")
# Filtrar municípios COM dados e calcular centroides
mg_map_data_filtered <- mg_map_data %>% filter(!is.na(media))
mg_centroids_filtered <- st_centroid(mg_map_data_filtered)
# Iniciar o plot base
p <- ggplot() +
# Camada 1: Limites de TODOS os municípios (fundo)
geom_sf(data = mg_mun, fill = "white", color = "grey85", size = 0.1)
# Adicionar camada das regiões SE ela foi carregada
if (plotar_regioes) {
p <- p + geom_sf(data = mg_regions, fill = NA, color = "black", size = 0.6)
}
# Adicionar camada dos centroides e demais elementos
p <- p +
# Camada 3: Centroides dos municípios COM DADOS (pontos)
geom_sf(data = mg_centroids_filtered, aes(size = n, color = media),
shape = 16, # Círculo sólido
alpha = 0.7) + # Adicionar transparência
# Escala de cores para a pontuação média
scale_color_viridis_c(option = "plasma", name = "Pontuação Média\n(0-100)") +
# Escala de tamanho para o número de respondentes (ajuste 'range' para aumentar o tamanho)
scale_size_continuous(name = "Nº Respondentes", range = c(2, 10)) + # Ajuste range (min, max size)
# Títulos e tema
labs(title = "Clima de Segurança Médio e Nº de Respondentes por Município",
subtitle = ifelse(plotar_regioes,
"Pontos nos centroides municipais | Linhas pretas = Macro-regiões de Saúde",
"Pontos nos centroides municipais"),
caption = "Fonte: Dados da pesquisa | Tamanho do ponto ~ Nº Respondentes | Cor do ponto ~ Pontuação Média") +
theme_void() + # Tema limpo
theme(
plot.title = element_text(hjust = 0.5, size = 14),
plot.subtitle = element_text(hjust = 0.5, size = 10),
plot.caption = element_text(hjust = 0.5, size = 8),
legend.position = "right"
)
# Exibir o mapa final
print(p)
# Verificar se os dados das regiões e os resumos estão disponíveis
if (!is.null(mg_regions) && exists("resumo_por_macro") && !is.null(resumo_por_macro)) {
cat("\nIniciando criação do mapa por macrorregião...\n")
# 1. Preparar dados geográficos das macrorregiões
mg_regions_map <- mg_regions %>%
mutate(Macro_limpo = limpar_nomes(name_health_region)) %>%
# Selecionar colunas relevantes para evitar conflitos de nome
select(code_health_region, Macro_limpo, geom)
# 2. Preparar dados de resumo por macrorregião
resumo_macro_map <- resumo_por_macro %>%
mutate(Macro_limpo = limpar_nomes(MACRORREGIOES)) %>%
# Selecionar colunas relevantes
select(Macro_limpo, MACRORREGIOES, media, n) # Manter nome original para rótulos
# 3. Juntar dados geográficos e de resumo
mg_map_macro_data <- left_join(mg_regions_map, resumo_macro_map, by = "Macro_limpo")
# Verificar NAs após junção (macrorregiões sem dados de respondentes)
nas_mapa_macro <- sum(is.na(mg_map_macro_data$media))
if (nas_mapa_macro > 0) {
cat(paste("Aviso: Encontradas", nas_mapa_macro, "macrorregiões geográficas sem dados de pontuação correspondentes.\n"))
}
# Calcular centroides para rótulos (APENAS das regiões COM dados)
mg_macro_centroids <- mg_map_macro_data %>%
filter(!is.na(media)) %>%
st_centroid()
# 4. Criar o mapa com ggplot2
p_macro <- ggplot() +
# Camada de fundo: limites municipais (opcional)
geom_sf(data = mg_mun, fill = NA, color = "grey85", size = 0.1) +
# Camada principal: Macrorregiões coloridas pela média
geom_sf(data = mg_map_macro_data, aes(fill = media), color = "black", size = 0.5) +
# Camada de rótulos: Nomes das macrorregiões nos centroides
geom_sf_text(data = mg_macro_centroids, aes(label = MACRORREGIOES),
size = 2.5, # Ajustar tamanho da fonte
color = "black",
check_overlap = TRUE) + # Evita sobreposição excessiva
# Escala de cores
scale_fill_viridis_c(option = "plasma", name = "Pontuação Média\n(0-100)",
na.value = "grey90") + # Cor para regiões sem dados
# Títulos e tema
labs(title = "Clima de Segurança Médio por Macrorregião de Saúde",
caption = "Fonte: Dados da pesquisa | Cor preenchimento ~ Pontuação Média") +
theme_void() +
theme(
plot.title = element_text(hjust = 0.5, size = 14),
plot.caption = element_text(hjust = 0.5, size = 8),
legend.position = "right"
)
# Exibir o mapa
print(p_macro)
} else {
cat("\nNão foi possível gerar o mapa por macrorregião. Verifique se os dados geográficos (mg_regions) e o resumo (resumo_por_macro) foram carregados/calculados corretamente.\n")
}
