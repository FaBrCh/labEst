n_aux_adm <- sum(str_to_upper(str_trim(dados_limpos[[col_cargo]])) == "AUX ADM", na.rm = TRUE)
cat(paste("Número de linhas com cargo 'AUX ADM' a serem removidas:", n_aux_adm, "\n"))
dados_limpos <- dados_limpos %>%
filter(str_to_upper(str_trim(!!sym(col_cargo))) != "AUX ADM")
linhas_apos_aux_adm <- nrow(dados_limpos)
cat(paste("Linhas após remover AUX ADM:", linhas_apos_aux_adm, "\n"))
# 3. Nova Regra: Mudar Formação para "Ensino Técnico" se Cargo == Técnico e Formação == Ensino Médio
# Contar quantos serão modificados
n_modificar_formacao_tec <- dados_limpos %>%
filter(str_trim(!!sym(col_cargo)) == "Técnico em Enfermagem" &
str_trim(!!sym(col_formacao)) == "Ensino Médio Completo") %>%
nrow()
cat(paste("Número de linhas onde Formação será mudada para 'Ensino Técnico':", n_modificar_formacao_tec, "\n"))
dados_limpos <- dados_limpos %>%
mutate(!!sym(col_formacao) := if_else(str_trim(!!sym(col_cargo)) == "Técnico em Enfermagem" &
str_trim(!!sym(col_formacao)) == "Ensino Médio Completo",
"Ensino Técnico",
!!sym(col_formacao)))
# 4. Mudar Cargo para "Auxiliar de Enfermagem" se Formação ainda for "Ensino Médio Completo"
# Verificar quantos serão modificados (agora considera apenas os que NÃO foram alterados na etapa 3)
n_modificar_cargo_aux <- dados_limpos %>%
filter(str_trim(!!sym(col_formacao)) == "Ensino Médio Completo") %>% # Não precisa mais checar o cargo aqui
nrow()
cat(paste("Número de linhas onde Cargo será mudado para 'Auxiliar de Enfermagem' (Formação = Ensino Médio Completo restante):", n_modificar_cargo_aux, "\n"))
dados_limpos <- dados_limpos %>%
mutate(!!sym(col_cargo) := if_else(str_trim(!!sym(col_formacao)) == "Ensino Médio Completo",
"Auxiliar de Enfermagem",
!!sym(col_cargo)))
linhas_depois_cargo_formacao <- nrow(dados_limpos)
linhas_removidas_total <- linhas_antes_cargo_formacao - linhas_depois_cargo_formacao
cat(paste("Linhas finais após tratamento Cargo/Formação:", linhas_depois_cargo_formacao, "\n"))
cat(paste("Total de linhas removidas nesta etapa (apenas AUX ADM):", linhas_removidas_total, "\n"))
cat("--- Fim tratamento por Cargo e Formação ---\n")
# Definir as colunas de experiência
col_exp_total <- "Tempo de Experiência Total como Profissional da Enfermagem...40"
col_exp_aps <- "Tempo de Experiência na Atenção Primária à Saúde"
col_exp_vac <- "Tempo de Experiência em Salas de Vacinação"
cols_experiencia <- c(col_exp_total, col_exp_aps, col_exp_vac)
# Definir nomes das novas colunas categorizadas
col_exp_total_cat <- paste0(col_exp_total, "_cat")
col_exp_aps_cat <- paste0(col_exp_aps, "_cat")
col_exp_vac_cat <- paste0(col_exp_vac, "_cat")
cols_experiencia_cat <- c(col_exp_total_cat, col_exp_aps_cat, col_exp_vac_cat)
# Função para limpar e categorizar a experiência
categorizar_experiencia <- function(texto) {
# Remover espaços extras e converter para minúsculas para padronização
texto_limpo <- str_trim(tolower(texto))
texto_limpo <- str_replace_all(texto_limpo, "\\s+", " ") # Normalizar espaços internos
# Categorias já existentes (retorna o próprio valor padronizado)
categorias_padrao <- c(
"menos de 6 meses", "de 6 meses a 1 ano", "de 1 a 3 anos",
"de 3 a 5 anos", "de 5 a 10 anos", "de 10 a 15 anos",
"de 15 a 20 anos", "mais de 20 anos"
)
if (texto_limpo %in% categorias_padrao) {
# Padronizar capitalização se necessário (opcional)
return(
case_when(
texto_limpo == "menos de 6 meses" ~ "Menos de 6 meses",
texto_limpo == "de 6 meses a 1 ano" ~ "de 6 meses a 1 ano",
texto_limpo == "de 1 a 3 anos" ~ "de 1 a 3 anos",
texto_limpo == "de 3 a 5 anos" ~ "de 3 a 5 anos",
texto_limpo == "de 5 a 10 anos" ~ "de 5 a 10 anos",
texto_limpo == "de 10 a 15 anos" ~ "de 10 a 15 anos",
texto_limpo == "de 15 a 20 anos" ~ "de 15 a 20 anos",
texto_limpo == "mais de 20 anos" ~ "Mais de 20 anos",
TRUE ~ texto_limpo # Fallback
)
)
}
# Casos especiais
if (is.na(texto_limpo) || texto_limpo %in% c("", "a", "0.0", "0a", "0", "00", "2s")) {
return(NA_character_)
}
if (str_detect(texto_limpo, "não trabalha|nao trabalhei")) {
return("Não aplicável") # Ou pode ser NA, dependendo da análise
}
if (str_detect(texto_limpo, "experiência em urgência")) {
return(NA_character_) # Texto livre não categorizável
}
# Extrair anos e meses usando regex
anos <- str_match(texto_limpo, "(\\d+)\\s*a")[, 2]
meses <- str_match(texto_limpo, "(\\d+)\\s*m")[, 2]
# Tratar casos como "10a6m" onde não há espaço
if (is.na(anos) && is.na(meses)) {
match_am <- str_match(texto_limpo, "(\\d+)a(\\d+)m")
if (!is.na(match_am[1,1])) {
anos <- match_am[1, 2]
meses <- match_am[1, 3]
}
}
# Converter para numérico, tratando NAs como 0
anos_num <- ifelse(is.na(anos), 0, as.numeric(anos))
meses_num <- ifelse(is.na(meses), 0, as.numeric(meses))
# Se ambos forem 0 após a extração (não encontrou padrão A ou M válido)
if (anos_num == 0 && meses_num == 0) {
# Tentar extrair apenas um número (pode ser ano ou mês, difícil saber)
# Vamos assumir que um número sozinho >= 1 é ano, < 12 (e não zero) é mês.
# Isso é uma heurística e pode precisar de ajuste.
num_isolado <- str_match(texto_limpo, "^(\\d+)$")[,2]
if (!is.na(num_isolado)) {
num <- as.numeric(num_isolado)
if (num >= 1) anos_num <- num
# Não vamos inferir meses aqui para evitar confusão, tratar como NA se for só mês < 12?
# Por agora, se for só numero < 12 e não for mês explícito, retorna NA.
else return(NA_character_)
} else {
# Se não encontrou nenhum padrão reconhecível
return(NA_character_)
}
}
# Calcular tempo total em anos
tempo_total_anos <- anos_num + (meses_num / 12)
# Mapear para categorias
if (tempo_total_anos == 0) { # caso específico de 0M
categoria <- "Menos de 6 meses"
} else if (tempo_total_anos < 0.5) {
categoria <- "Menos de 6 meses"
} else if (tempo_total_anos >= 0.5 && tempo_total_anos < 1) {
categoria <- "de 6 meses a 1 ano"
} else if (tempo_total_anos >= 1 && tempo_total_anos < 3) {
categoria <- "de 1 a 3 anos"
} else if (tempo_total_anos >= 3 && tempo_total_anos < 5) {
categoria <- "de 3 a 5 anos"
} else if (tempo_total_anos >= 5 && tempo_total_anos < 10) {
categoria <- "de 5 a 10 anos"
} else if (tempo_total_anos >= 10 && tempo_total_anos < 15) {
categoria <- "de 10 a 15 anos"
} else if (tempo_total_anos >= 15 && tempo_total_anos < 20) {
categoria <- "de 15 a 20 anos"
} else if (tempo_total_anos >= 20) {
categoria <- "Mais de 20 anos"
} else {
categoria <- NA_character_ # Caso não se encaixe em nenhuma categoria
}
return(categoria)
}
# Aplicar a função para criar as NOVAS colunas categorizadas
# Usando .after para tentar posicionar as novas colunas (pode variar com a versão do dplyr)
dados_limpos <- dados_limpos %>%
mutate(
!!col_exp_total_cat := sapply(.data[[col_exp_total]], categorizar_experiencia, USE.NAMES = FALSE),
.after = all_of(col_exp_total)
) %>%
mutate(
!!col_exp_aps_cat := sapply(.data[[col_exp_aps]], categorizar_experiencia, USE.NAMES = FALSE),
.after = all_of(col_exp_aps)
) %>%
mutate(
!!col_exp_vac_cat := sapply(.data[[col_exp_vac]], categorizar_experiencia, USE.NAMES = FALSE),
.after = all_of(col_exp_vac)
)
# Verificar os valores únicos nas novas colunas
valores_distintos_limpos <- list(
total = unique(dados_limpos[[col_exp_total_cat]]),
aps = unique(dados_limpos[[col_exp_aps_cat]]),
vac = unique(dados_limpos[[col_exp_vac_cat]])
)
print("Valores distintos nas colunas CATEGORIZADAS após limpeza:")
print(valores_distintos_limpos)
# Verificar alguns exemplos (colunas originais e novas lado a lado)
print("Exemplos de dados limpos (original vs categorizado):")
print(head(dados_limpos[c(col_exp_total, col_exp_total_cat, col_exp_aps, col_exp_aps_cat, col_exp_vac, col_exp_vac_cat)]))
# Contar NAs introduzidos ou mantidos nas NOVAS colunas
na_counts <- colSums(is.na(dados_limpos[cols_experiencia_cat]))
print("Contagem de NAs nas colunas CATEGORIZADAS após limpeza:")
print(na_counts)
# >>> FILTRAGEM ADICIONAL: Remover quem tem menos de 6 meses em SALA DE VACINAÇÃO (usando a nova coluna) <<<
linhas_antes_filtro_exp_vac <- nrow(dados_limpos)
# Definir valores a serem excluídos
valores_excluir_exp_vac <- c("Menos de 6 meses", "Não aplicável")
# Aplicar o filtro: manter apenas linhas ONDE a coluna NÃO é NA E NÃO está na lista de exclusão
dados_limpos <- dados_limpos %>%
filter(
!is.na(.data[[col_exp_vac_cat]]) &
!(.data[[col_exp_vac_cat]] %in% valores_excluir_exp_vac)
)
linhas_apos_filtro_exp_vac <- nrow(dados_limpos)
linhas_removidas_exp_vac <- linhas_antes_filtro_exp_vac - linhas_apos_filtro_exp_vac
cat(paste0("\\nFiltragem adicional: Removidas ", linhas_removidas_exp_vac,
" linhas onde ", col_exp_vac_cat, " era 'Menos de 6 meses', 'Não aplicável' ou NA.\\n",
"Linhas restantes: ", linhas_apos_filtro_exp_vac, "\\n"))
# Criar um resumo dos domínios conforme definido no README
resumo_dominios <- data.frame(
dominio = c("Clima de trabalho em equipe", "Clima de Segurança",
"Satisfação no trabalho", "Percepção do estresse",
"Percepção da gestão", "Condições de trabalho",
"Itens não correlacionados"),
itens = c("1-6", "7-13", "15-19", "20-23", "24-29", "30-32", "14, 33-36"),
n_itens = c(6, 7, 5, 4, 6, 3, 5)
)
# Mostrar o resumo dos domínios
gt::gt(resumo_dominios) %>%
gt::cols_label(
dominio = "Domínio",
itens = "Questões",
n_itens = "Nº de Itens"
) %>%
gt::tab_header(title = "Estrutura do Questionário") %>%
gt::tab_footnote(
footnote = "Conforme descrito no README do projeto",
locations = gt::cells_title()
)
# Criar um resumo dos domínios conforme definido no README
resumo_dominios <- data.frame(
dominio = c("Clima de trabalho em equipe", "Clima de Segurança",
"Satisfação no trabalho", "Percepção do estresse",
"Percepção da gestão", "Condições de trabalho",
"Itens não correlacionados"),
itens = c("1-6", "7-13", "15-19", "20-23", "24-29", "30-32", "14, 33-36"),
n_itens = c(6, 7, 5, 4, 6, 3, 5)
)
# Mostrar o resumo dos domínios
gt::gt(resumo_dominios) %>%
gt::cols_label(
dominio = "Domínio",
itens = "Questões",
n_itens = "Nº de Itens"
) %>%
gt::tab_header(title = "Estrutura do Questionário") %>%
gt::tab_footnote(
footnote = "Conforme descrito no README do projeto",
locations = gt::cells_title()
)
# Função para mapear os valores originais para a escala 0-100
mapear_escala <- function(x) {
case_when(
x == 1 ~ 0,
x == 2 ~ 25,
x == 3 ~ 50,
x == 4 ~ 75,
x == 5 ~ 100,
TRUE ~ NA_real_
)
}
# Aplicar o mapeamento em todas as questões do questionário
dados_mapeados <- dados_limpos %>%
mutate(across(all_of(colunas_questionario), mapear_escala))
# Calcular domínios corretamente com a nova escala mapeada
dados_mapeados <- dados_mapeados %>%
mutate(
# Inverter escala para questões negativas (já mapeadas)
q2_inv = 100 - dados_mapeados$`2. É difícil falar abertamente se eu percebo um problema com o cuidado ao paciente relacionado a vacinação`,
q11_inv = 100 - dados_mapeados$`11. Nesta unidade, é difícil discutir sobre erros`,
q20_inv = 100 - dados_mapeados$`20. Quando minha carga de trabalho é excessiva, meu desempenho é prejudicado`,
q21_inv = 100 - dados_mapeados$`21. Eu sou menos eficiente no trabalho quando estou cansado (a)`,
q22_inv = 100 - dados_mapeados$`22. Eu tenho maior probabilidade de cometer erros em situações tensas ou hostis`,
q23_inv = 100 - dados_mapeados$`23. O cansaço prejudica meu desempenho durante situações de stress (ex: interrupções, inquietude do vacinado, choro)`,
q36_inv = 100 - dados_mapeados$`36. Falhas na comunicação que levam a atrasos no atendimento são comuns`,
# Cálculo dos escores por domínio
clima_trabalho_equipe = rowMeans(
cbind(
dados_mapeados$`1. As sugestões do (a) enfermeiro (a) são bem recebidas na sala de vacinação`,
q2_inv,
dados_mapeados$`3. Em relação à vacinação, as discordâncias são resolvidas de modo apropriado (ex: não quem está certo, mas o que é melhor para o paciente)`,
dados_mapeados$`4. Eu tenho o apoio que necessito de outros membros da equipe para assistência aos pacientes na sala e vacinação`,
dados_mapeados$`5. É fácil para mim, que atuo na vacinação, fazer perguntas quando existe algo que eu não entendo`,
dados_mapeados$`6. A equipe de enfermagem daqui trabalha junto como uma equipe bem coordenada`
),
na.rm = TRUE),
clima_seguranca = rowMeans(
cbind(
dados_mapeados$`7. Eu me sentiria seguro (a) se fosse vacinado (a) aqui como paciente`,
dados_mapeados$`8. Erros são tratados de maneira apropriada pela equipe`,
dados_mapeados$`9. Eu conheço os meios adequados para encaminhar as questões relacionadas à segurança do paciente nesta unidade`,
dados_mapeados$`10. Eu recebo retorno apropriado sobre meu desempenho`,
q11_inv,
dados_mapeados$`12. Sou encorajado (a) por meus colegas a informar qualquer preocupação que eu possa ter quanto à segurança em sala de vacinação`,
dados_mapeados$`13. A cultura de segurança em vacinação torna fácil aprender com os erros dos outros`
),
na.rm = TRUE),
satisfacao_trabalho = rowMeans(
cbind(
dados_mapeados$`15. Eu gosto de trabalhar com vacinação`,
dados_mapeados$`16. Trabalhar aqui é como fazer parte de uma grande família`,
dados_mapeados$`17. A sala de vacinação é um bom lugar para trabalhar`,
dados_mapeados$`18. Eu me orgulho de trabalhar na vacinação`,
dados_mapeados$`19. O prestígio em trabalhar com vacinação é alto`
),
na.rm = TRUE),
percepcao_estresse = rowMeans(
cbind(q20_inv, q21_inv, q22_inv, q23_inv),
na.rm = TRUE),
percepcao_gestao = rowMeans(
cbind(
dados_mapeados$`24. A coordenação apoia meus esforços diários`,
dados_mapeados$`25. A coordenação não compromete conscientemente a segurança do paciente`,
dados_mapeados$`26. A coordenação está fazendo um bom trabalho`,
dados_mapeados$`27. Profissionais problemáticos da equipe são tratados de maneira construtiva por nossa coordenação da unidade`,
dados_mapeados$`28. Recebo informações adequadas e oportunas sobre eventos que podem afetar o meu trabalho em sala de vacinação`,
dados_mapeados$`29. Na sala de vacinação, o número e a qualificação dos profissionais são suficientes para lidar com o número de pacientes`
),
na.rm = TRUE),
condicoes_trabalho = rowMeans(
cbind(
dados_mapeados$`30. Esta unidade faz um bom trabalho no treinamento de novos membros da equipe de vacinação`,
dados_mapeados$`31. Toda informação necessária para a vacinação está disponível rotineiramente para mim`,
dados_mapeados$`32. Estagiários da minha profissão são adequadamente supervisionados`
),
na.rm = TRUE)
)
# Verificar estatísticas dos domínios na escala 0-100
summary(dados_mapeados[c("clima_trabalho_equipe", "clima_seguranca", "satisfacao_trabalho",
"percepcao_estresse", "percepcao_gestao", "condicoes_trabalho")])
# Identificar colunas das questões originais a serem usadas na média geral
colunas_originais_para_media <- setdiff(
colunas_questionario,
c("2. É difícil falar abertamente se eu percebo um problema com o cuidado ao paciente relacionado a vacinação",
"11. Nesta unidade, é difícil discutir sobre erros",
"20. Quando minha carga de trabalho é excessiva, meu desempenho é prejudicado",
"21. Eu sou menos eficiente no trabalho quando estou cansado (a)",
"22. Eu tenho maior probabilidade de cometer erros em situações tensas ou hostis",
"23. O cansaço prejudica meu desempenho durante situações de stress (ex: interrupções, inquietude do vacinado, choro)",
"36. Falhas na comunicação que levam a atrasos no atendimento são comuns")
)
# Colunas invertidas a serem usadas na média geral
colunas_invertidas_para_media <- c("q2_inv", "q11_inv", "q20_inv", "q21_inv", "q22_inv", "q23_inv", "q36_inv")
# Criar a avaliação global do clima de segurança (média das 36 questões mapeadas/invertidas)
dados_mapeados <- dados_mapeados %>%
mutate(
clima_seguranca_total = rowMeans(
select(., all_of(c(colunas_originais_para_media, colunas_invertidas_para_media))),
na.rm = TRUE
),
# Adicionar a pontuação média dos domínios
clima_dominio_medio = rowMeans(
select(., clima_trabalho_equipe, clima_seguranca, satisfacao_trabalho,
percepcao_estresse, percepcao_gestao, condicoes_trabalho),
na.rm = TRUE
)
)
# Adicionar classificação por pontuação (agora baseada na média das 36 questões)
dados_mapeados <- dados_mapeados %>%
mutate(
classificacao_clima = case_when(
clima_seguranca_total >= 75 ~ "Positivo",
clima_seguranca_total >= 50 ~ "Neutro",
TRUE ~ "Negativo"
)
)
# Contar quantos respondentes em cada categoria (baseado na nova classificação)
table(dados_mapeados$classificacao_clima)
# Verificar estatísticas dos novos escores finais
summary(dados_mapeados[c("clima_seguranca_total", "clima_dominio_medio")])
# Adicionar classificação por pontuação (agora baseada na média das 36 questões)
dados_mapeados <- dados_mapeados %>%
mutate(
classificacao_clima = case_when(
clima_seguranca_total >= 75 ~ "Positivo",
clima_seguranca_total >= 50 ~ "Neutro",
TRUE ~ "Negativo"
)
)
# Tabela 1: Distribuição da Classificação do Clima (Baseada na Média das 36 Questões)
tabela_classificacao <- dados_mapeados %>%
count(classificacao_clima) %>%
mutate(
Percentual = n / sum(n) * 100,
# Ordenar manualmente para Positivo, Neutro, Negativo
classificacao_clima = factor(classificacao_clima, levels = c("Positivo", "Neutro", "Negativo"))
) %>%
arrange(classificacao_clima) %>% # Garantir a ordem
gt::gt() %>%
gt::cols_label(
classificacao_clima = "Classificação do Clima",
n = "N",
Percentual = "Percentual (%)"
) %>%
gt::fmt_number(
columns = Percentual,
decimals = 1
) %>%
gt::tab_header(title = "Distribuição da Classificação Geral do Clima de Segurança") %>%
gt::tab_footnote(
footnote = "Classificação baseada na média das 36 questões (clima_seguranca_total).",
locations = gt::cells_title()
)
print(tabela_classificacao)
# Tabela 2: Estatísticas Descritivas das Pontuações Finais
tabela_descritiva_pontuacoes <- dados_mapeados %>%
select(clima_seguranca_total, clima_dominio_medio) %>%
tbl_summary(
label = list(
clima_seguranca_total ~ "Escore Total (Média 36 Questões)",
clima_dominio_medio ~ "Escore Médio dos Domínios"
),
statistic = list(
all_continuous() ~ "{mean} ({sd})", # Média (DP)
all_categorical() ~ "{n} / {N} ({p}%)"
),
digits = list(
all_continuous() ~ 1 # 1 casa decimal
),
missing = "no" # Não mostrar contagem de missing
) %>%
modify_header(label ~ "**Pontuação**") %>%
modify_caption("**Tabela 2: Estatísticas Descritivas das Pontuações Finais (Escala 0-100)**") %>%
bold_labels()
# Tabela 1: Distribuição da Classificação do Clima (Baseada na Média das 36 Questões)
tabela_classificacao <- dados_mapeados %>%
count(classificacao_clima) %>%
mutate(
Percentual = n / sum(n) * 100,
# Ordenar manualmente para Positivo, Neutro, Negativo
classificacao_clima = factor(classificacao_clima, levels = c("Positivo", "Neutro", "Negativo"))
) %>%
arrange(classificacao_clima) %>% # Garantir a ordem
gt::gt() %>%
gt::cols_label(
classificacao_clima = "Classificação do Clima",
n = "N",
Percentual = "Percentual (%)"
) %>%
gt::fmt_number(
columns = Percentual,
decimals = 1
) %>%
gt::tab_header(title = "Distribuição da Classificação Geral do Clima de Segurança") %>%
gt::tab_footnote(
footnote = "Classificação baseada na média das 36 questões (clima_seguranca_total).",
locations = gt::cells_title()
)
print(tabela_classificacao)
# Tabela 2: Estatísticas Descritivas das Pontuações Finais
tabela_descritiva_pontuacoes <- dados_mapeados %>%
select(clima_seguranca_total, clima_dominio_medio) %>%
tbl_summary(
label = list(
clima_seguranca_total ~ "Escore Total (Média 36 Questões)",
clima_dominio_medio ~ "Escore Médio dos Domínios"
),
statistic = list(
all_continuous() ~ "{mean} ({sd})", # Média (DP)
all_categorical() ~ "{n} / {N} ({p}%)"
),
digits = list(
all_continuous() ~ 1 # 1 casa decimal
),
missing = "no" # Não mostrar contagem de missing
) %>%
modify_header(label ~ "**Pontuação**") %>%
modify_caption("**Tabela 2: Estatísticas Descritivas das Pontuações Finais (Escala 0-100)**") %>%
bold_labels()
install.packages("glue")
install.packages("glue")
# Tabela 2: Estatísticas Descritivas das Pontuações Finais
tabela_descritiva_pontuacoes <- dados_mapeados %>%
select(clima_seguranca_total, clima_dominio_medio) %>%
tbl_summary(
label = list(
clima_seguranca_total ~ "Escore Total (Média 36 Questões)",
clima_dominio_medio ~ "Escore Médio dos Domínios"
),
statistic = list(
all_continuous() ~ "{mean} ({sd})", # Média (DP)
all_categorical() ~ "{n} / {N} ({p}%)"
),
digits = list(
all_continuous() ~ 1 # 1 casa decimal
),
missing = "no" # Não mostrar contagem de missing
) %>%
modify_header(label ~ "**Pontuação**") %>%
modify_caption("**Tabela 2: Estatísticas Descritivas das Pontuações Finais (Escala 0-100)**")
library(gtsummary)
install.packages("glue")
# Instalar o pacote readxl se não estiver instalado
if (!require("readxl")) {
install.packages("readxl")
}
# Carregar o pacote readxl
library(readxl)
# Carregar pacotes necessários
library(tidyverse)
library(psych)      # Para análises estatísticas descritivas
library(gtsummary)  # Para tabelas de resumo
# Instalar o pacote readxl se não estiver instalado
if (!require("readxl")) {
install.packages("readxl")
}
# Carregar o pacote readxl
library(readxl)
# Carregar pacotes necessários
library(tidyverse)
install.packages("readxl")
install.packages("readxl")
# Carregar o pacote readxl
library(readxl)
# Carregar pacotes necessários
library(tidyverse)
library(psych)      # Para análises estatísticas descritivas
library(gtsummary)  # Para tabelas de resumo
install.packages("glue")
library(glue)
remove.packages("glue")
install.packages("glue")
cls
install.packages("glue")
install.packages("glue")
# Carregar o pacote readxl
library(readxl)
# Carregar pacotes necessários
library(tidyverse)
library(psych)      # Para análises estatísticas descritivas
# Carregar o pacote readxl
library(readxl)
# Carregar pacotes necessários
library(tidyverse)
library(psych)      # Para análises estatísticas descritivas
library(gtsummary)  # Para tabelas de resumo
install.packages("glue")
install.packages("glue", dependencies = TRUE)
